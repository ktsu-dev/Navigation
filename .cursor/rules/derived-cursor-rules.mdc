---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT OVERVIEW

This document outlines the rules, guidelines, and best practices for developing and maintaining the AI-assisted navigation stack library. This library is intended to be a robust, flexible, and maintainable solution for managing navigation within applications, with support for undo/redo functionality, persistence, and a clean architecture.

## ARCHITECTURE

The project follows a Contracts, Models, Services (CMS) architecture, adhering to SOLID and DRY principles.

*   **Contracts:** Define interfaces for services and data structures.
*   **Models:** Represent the data structures used throughout the library.
*   **Services:** Implement the core logic of the navigation stack.

## TECH STACK

*   .NET (Specific version to be determined and updated here)
*   .NET 8.0 or later (as of 2025-05-29)

## CODING STANDARDS

*   Adhere to SOLID principles (Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion).
*   Follow DRY principle (Don't Repeat Yourself).
*   Use meaningful names for variables, methods, and classes.
*   Write clear and concise comments to explain complex logic.
*   Keep methods short and focused on a single task.
*   Use consistent formatting and indentation.
*   Follow established coding standards (see contributing guidelines in documentation - added 2025-05-29)
*   Using directives must be placed inside of a namespace declaration.
*   Explicit accessibility modifiers (public, private, etc.) are required.
*   Adhere to .NET naming conventions. Pay special attention to naming conventions for EventHandlers and types ending with "Stack".
    *   Types ending with "Stack" should be avoided (CA1711).
    *   EventHandlers should use the generic EventHandler<T> pattern (CA1003).
*   Avoid using `var` keyword; use explicit type declarations instead.

## WORKFLOW & RELEASE RULES

*   Use Git for version control.
*   Create branches for new features and bug fixes.
*   Submit pull requests for code review before merging into the main branch.
*   Write unit tests for all new code.
*   Ensure all tests pass before submitting a pull request.
*   Follow semantic versioning for releases.

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

*   Maintain a comprehensive README file with instructions on how to use the library.
*   Generate API documentation using XML comments.
*   Create a `docs` directory with design documentation (added 2025-05-29).
    *   Architecture.md - Detailed architecture and design patterns
    *   API.md - Complete API documentation
    *   Usage.md - Common usage patterns and best practices
    *   Integration.md - How to integrate with external systems
    *   Examples.md - Comprehensive code examples
    *   Design-Decisions.md - Rationale behind architectural choices
    *   implementation-analysis.md - Detailed analysis of the current implementation status, issues, and remaining work.

## DEBUGGING

*   Use a debugger to step through code and identify issues.
*   Write unit tests to verify the correctness of code.
*   Use logging to track the execution of code and identify errors.
*   When encountering compilation errors related to nullability, especially with generic types, consider using `default(T?)` instead of `null` to ensure proper type inference.
*   Ensure the project builds successfully before running tests. Common build errors include:
    *   Incorrect placement of `using` directives.
    *   Missing accessibility modifiers.
    *   Naming convention violations.
    *   Incorrect EventHandler usage.
    *   Usage of non-primary constructors.
    *   Usage of `var` keyword instead of explicit types.
*   Be aware of potential JSON serialization issues when using interfaces like `INavigationState<T>`. Concrete type registration or custom converters may be needed.

## PERSISTENCE

*   Implement a mechanism for persisting the navigation stack across sessions.
*   Consider using a database or file storage for persistence.
*   Ensure that the persistence mechanism is efficient and reliable.

## UNDO/REDO

*   Integrate with an external undo/redo provider.
*   Implement commands for navigation operations to support undo/redo functionality.